package com.gummyslug.processing;

import processing.core.PApplet;
import ddf.minim.AudioInput;
import ddf.minim.Minim;
import ddf.minim.analysis.FFT;

/**
 * This sketch demonstrates how to use an FFT to analyze the audio being
 * generated by an AudioPlayer.
 * <p>
 * FFT stands for Fast Fourier Transform, which is a method of analyzing audio
 * that allows you to visualize the frequency content of a signal. You've seen
 * visualizations like this before in music players and car stereos.
 * <p>
 * For more information about Minim and additional features, visit
 * http://code.compartmental.net/minim/
 */
public class AnalyzeSound extends PApplet {

	private static final long serialVersionUID = 1L;
	Minim minim;
	FFT fft;
	AudioInput audioInput;

	public void setup() {
		colorMode(HSB, 255);
		size(512, 200, P3D);

		minim = new Minim(this);

		// create an FFT object that has a time-domain buffer
		// the same size as jingle's sample buffer
		// note that this needs to be a power of two
		// and that it means the size of the spectrum will be half as large.
		audioInput = minim.getLineIn(Minim.STEREO, 2048, 192000.0f);
		fft = new FFT(audioInput.bufferSize(), audioInput.sampleRate());

	}

	public void draw() {
		background(0);
		stroke(255);

		// perform a forward FFT on the samples in jingle's mix buffer,
		// which contains the mix of both the left and right channels of the
		// file
		fft.forward(audioInput.mix);

		// float rectWidth = width / fft.specSize();
		float rectWidth = 10;

		for (int i = 0; i < fft.specSize(); i++) {
			// draw the line for frequency band i, scaling it up a bit so we can
			// see it
			line(i, height, i, height - fft.getBand(i) * 8);
			fill(255, 255, 255);
			// rect(i * rectWidth, height, (i+1) * rectWidth, height -
			// fft.getBand(i) * 8);
			rect(i * rectWidth, height, rectWidth, height - fft.getBand(i) * 8);
		}
	}

}
